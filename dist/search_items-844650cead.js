searchNodes=[{"doc":"Snowflake driver for Elixir. Documentation: https://hginsights.github.io/snowpack Features Automatic decoding and encoding of Elixir values to and from Snowflake's ODBC driver formats Supports transactions, prepared queries, streaming, pooling and more via DBConnection Supports Snowflake ODBC Drivers 2.22.5 Usage Add :snowpack to your dependencies: def deps ( ) do [ { :snowpack , &quot;~&gt; 0.1.0&quot; } ] end Make sure you are using the latest version! opts = [ connection : [ role : &quot;DEV&quot; , warehouse : System . get_env ( &quot;SNOWFLAKE_WH&quot; ) , uid : System . get_env ( &quot;SNOWFLAKE_UID&quot; ) , pwd : System . get_env ( &quot;SNOWFLAKE_PWD&quot; ) ] ] { :ok , pid } = Snowpack . start_link ( opts ) Snowpack . query! ( pid , &quot;select current_user()&quot; ) Snowpack . query ( pid , &quot;SELECT * FROM data&quot; ) { :ok , % Snowpack.Result { columns : [ &quot;id&quot; , &quot;title&quot; ] , num_rows : 3 , rows : [ [ 1 , &quot;Data 1&quot; ] , [ 2 , &quot;Data 2&quot; ] , [ 3 , &quot;Data 3&quot; ] ] } } It's recommended to start Snowpack under a supervision tree: defmodule MyApp.Application do use Application def start ( _type , _args ) do children = [ { Snowpack , uid : &quot;snowflake-uid&quot; , name : :snowpack } ] opts = [ strategy : :one_for_one , name : MyApp.Supervisor ] Supervisor . start_link ( children , opts ) end end and then we can refer to it by its :name : Snowpack . query! ( :snowpack , &quot;SELECT NOW()&quot; ) . rows [ [ ~N[2018-12-28 13:42:31] ] ] Data representation Snowflake ODBC Elixir -- -- - -- -- -- NULL nil bool true | false int 42 float 42.0 decimal 42.0 date ~D[2013-10-12] time ~T[00:37:14] datetime ~N[2013-10-12 00:37:14] # (2) timestamp ~U[2013-10-12 00:37:14Z] # (2) char &quot;Ã©&quot; text &quot;snowpack&quot; binary &lt;&lt; 1 , 2 , 3 &gt;&gt; bit &lt;&lt; 1 :: size ( 1 ) , 0 :: size ( 1 ) &gt;&gt; array [ 1 , 2 , 3 ] object %{ key : &quot;value&quot; } Notes: See Decimal Datetime fields are represented as NaiveDateTime , however a UTC DateTime can be used for encoding as well","ref":"Snowpack.html","title":"Snowpack","type":"module"},{"doc":"Returns a supervisor child specification for a DBConnection pool.","ref":"Snowpack.html#child_spec/1","title":"Snowpack.child_spec/1","type":"function"},{"doc":"Closes a prepared query. Returns :ok on success, or raises an exception if there was an error. Options Options are passed to DBConnection.close/3 , see it's documentation for all available options.","ref":"Snowpack.html#close/3","title":"Snowpack.close/3","type":"function"},{"doc":"Executes a prepared query. Options Options are passed to DBConnection.execute/4 , see it's documentation for all available options. Examples iex&gt; { :ok , query } = Snowpack . prepare ( conn , &quot;&quot; , &quot;SELECT ? * ?&quot; ) iex&gt; { :ok , % Snowpack.Result { rows : [ row ] } } = Snowpack . execute ( conn , query , [ 2 , 3 ] ) iex&gt; row [ 6 ]","ref":"Snowpack.html#execute/4","title":"Snowpack.execute/4","type":"function"},{"doc":"Executes a prepared query. Returns %Snowpack.Result{} on success, or raises an exception if there was an error. See: execute/4 .","ref":"Snowpack.html#execute!/4","title":"Snowpack.execute!/4","type":"function"},{"doc":"Prepares a query to be later executed. To execute the query, call execute/4 . To close the query, call close/3 . If a name is given, the name must be unique per query, as the name is cached but the statement isn't. If a new statement is given to an old name, the old statement will be the one effectively used. Options Options are passed to DBConnection.prepare/3 , see it's documentation for all available options. Examples iex&gt; { :ok , query } = Snowpack . prepare ( conn , &quot;&quot; , &quot;SELECT ? * ?&quot; ) iex&gt; { :ok , % Snowpack.Result { rows : [ row ] } } = Snowpack . execute ( conn , query , [ 2 , 3 ] ) iex&gt; row [ 6 ]","ref":"Snowpack.html#prepare/4","title":"Snowpack.prepare/4","type":"function"},{"doc":"Prepares a query. Returns %Snowpack.Query{} on success, or raises an exception if there was an error. See prepare/4 .","ref":"Snowpack.html#prepare!/4","title":"Snowpack.prepare!/4","type":"function"},{"doc":"Prepares and executes a query in a single step. Multiple results If a query returns multiple results (e.g. it's calling a procedure that returns multiple results) an error is raised. If a query may return multiple results it's recommended to use stream/4 instead. Options Options are passed to DBConnection.prepare_execute/4 , see it's documentation for all available options. Examples iex&gt; { :ok , _query , % Snowpack.Result { rows : [ row ] } } = Snowpack . prepare_execute ( conn , &quot;&quot; , &quot;SELECT ? * ?&quot; , [ 2 , 3 ] ) iex&gt; row [ 6 ]","ref":"Snowpack.html#prepare_execute/5","title":"Snowpack.prepare_execute/5","type":"function"},{"doc":"Prepares and executes a query in a single step. Returns {%Snowpack.Query{}, %Snowpack.Result{}} on success, or raises an exception if there was an error. See: prepare_execute/5 .","ref":"Snowpack.html#prepare_execute!/5","title":"Snowpack.prepare_execute!/5","type":"function"},{"doc":"Runs a query. Examples iex&gt; Snowpack . query ( conn , &quot;SELECT * FROM posts&quot; ) { :ok , % Snowpack.Result { } }","ref":"Snowpack.html#query/4","title":"Snowpack.query/4","type":"function"},{"doc":"Runs a query. Returns %Snowpack.Result{} on success, or raises an exception if there was an error. See query/4 .","ref":"Snowpack.html#query!/4","title":"Snowpack.query!/4","type":"function"},{"doc":"Starts the connection process and connects to Snowflake. Options Snowflake Connection Options See: https://docs.snowflake.com/en/user-guide/odbc-parameters.html#required-connection-parameters :connection :dsn - Specifies the name of your DSN :driver - Snowflake ODBC driver path :server - Specifies the hostname for your account :role - Specifies the default role to use for sessions initiated by the driver :warehouse - Specifies the default warehouse to use for sessions initiated by the driver :database - Specifies the default database to use for sessions initiated by the driver :schema - Specifies the default schema to use for sessions initiated by the driver (default: public ) :uid - Specifies the login name of the Snowflake user to authenticate :pwd - A password is required to connect to Snowflake :authenticator - Specifies the authenticator to use for verifying user login credentials :token - Specifies the token to use for token based authentication :priv_key_file - Specifies the local path to the private key file DBConnection Options The given options are passed down to DBConnection, some of the most commonly used ones are documented below: :after_connect - A function to run after the connection has been established, either a 1-arity fun, a {module, function, args} tuple, or nil (default: nil ) :pool - The pool module to use, defaults to built-in pool provided by DBconnection :pool_size - The size of the pool See DBConnection.start_link/2 for more information and a full list of available options. Examples Start connection using basic User / Pass configuration: iex&gt; { :ok , pid } = Snowpack . start_link ( connection : [ server : &quot;account-id.snowflakecomputing.com&quot; , uid : &quot;USER&quot; , pwd : &quot;PASS&quot; ] ) { :ok , # PID &lt; 0 . 69 . 0 &gt; } Start connection using DNS configuration: iex&gt; { :ok , pid } = Snowpack . start_link ( connection : [ dsn : &quot;snowflake&quot; ] ) { :ok , # PID &lt; 0 . 69 . 0 &gt; } Run a query after connection has been established: iex&gt; { :ok , pid } = Snowpack . start_link ( connection : [ dsn : &quot;snowflake&quot; ] , after_connect : &amp; Snowpack . query! ( &amp;1 , &quot;SET time_zone = &#39;+00:00&#39;&quot; ) ) { :ok , # PID &lt; 0 . 69 . 0 &gt; }","ref":"Snowpack.html#start_link/1","title":"Snowpack.start_link/1","type":"function"},{"doc":"","ref":"Snowpack.html#t:conn/0","title":"Snowpack.conn/0","type":"type"},{"doc":"","ref":"Snowpack.html#t:option/0","title":"Snowpack.option/0","type":"type"},{"doc":"","ref":"Snowpack.html#t:snowflake_conn_option/0","title":"Snowpack.snowflake_conn_option/0","type":"type"},{"doc":"","ref":"Snowpack.html#t:start_option/0","title":"Snowpack.start_option/0","type":"type"},{"doc":"Adapter to Erlang's :odbc module. This module is a GenServer that handles communication between Elixir and Erlang's :odbc module. It is used by Snowpack.Protocol and should not generally be accessed directly.","ref":"Snowpack.ODBC.html","title":"Snowpack.ODBC","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Snowpack.ODBC.html#child_spec/1","title":"Snowpack.ODBC.child_spec/1","type":"function"},{"doc":"Describes the given table.","ref":"Snowpack.ODBC.html#describe/2","title":"Snowpack.ODBC.describe/2","type":"function"},{"doc":"","ref":"Snowpack.ODBC.html#describe_result/2","title":"Snowpack.ODBC.describe_result/2","type":"function"},{"doc":"Disconnects from the ODBC driver. pid is the :odbc process id","ref":"Snowpack.ODBC.html#disconnect/1","title":"Snowpack.ODBC.disconnect/1","type":"function"},{"doc":"Callback implementation for GenServer.init/1 .","ref":"Snowpack.ODBC.html#init/1","title":"Snowpack.ODBC.init/1","type":"function"},{"doc":"Sends a parametrized query to the ODBC driver. Interface to :odbc.param_query/3 .See Erlang's ODBC guide for usage details and examples. pid is the :odbc process id statement is the SQL query string params are the parameters to send with the SQL query opts are options to be passed on to :odbc timeout in millisecods (defaults to 2 minutes) with_query_id runs query in transaction and selects LAST_QUERY_ID()","ref":"Snowpack.ODBC.html#query/5","title":"Snowpack.ODBC.query/5","type":"function"},{"doc":"Starts the connection process to the ODBC driver. conn_str should be a connection string in the format required by your ODBC driver. opts will be passed verbatim to :odbc.connect/2 .","ref":"Snowpack.ODBC.html#start_link/2","title":"Snowpack.ODBC.start_link/2","type":"function"},{"doc":"Implementation of DBConnection behaviour for Snowpack.ODBC . Handles translation of concepts to what ODBC expects and holds state for a connection. This module is not called directly, but rather through other Snowpack modules or DBConnection functions.","ref":"Snowpack.Protocol.html","title":"Snowpack.Protocol","type":"module"},{"doc":"","ref":"Snowpack.Protocol.html#checkin/1","title":"Snowpack.Protocol.checkin/1","type":"function"},{"doc":"Callback implementation for DBConnection.checkout/1 .","ref":"Snowpack.Protocol.html#checkout/1","title":"Snowpack.Protocol.checkout/1","type":"function"},{"doc":"Callback implementation for DBConnection.connect/1 .","ref":"Snowpack.Protocol.html#connect/1","title":"Snowpack.Protocol.connect/1","type":"function"},{"doc":"Callback implementation for DBConnection.disconnect/2 .","ref":"Snowpack.Protocol.html#disconnect/2","title":"Snowpack.Protocol.disconnect/2","type":"function"},{"doc":"Callback implementation for DBConnection.handle_begin/2 .","ref":"Snowpack.Protocol.html#handle_begin/2","title":"Snowpack.Protocol.handle_begin/2","type":"function"},{"doc":"Callback implementation for DBConnection.handle_close/3 .","ref":"Snowpack.Protocol.html#handle_close/3","title":"Snowpack.Protocol.handle_close/3","type":"function"},{"doc":"Callback implementation for DBConnection.handle_commit/2 .","ref":"Snowpack.Protocol.html#handle_commit/2","title":"Snowpack.Protocol.handle_commit/2","type":"function"},{"doc":"Callback implementation for DBConnection.handle_deallocate/4 .","ref":"Snowpack.Protocol.html#handle_deallocate/4","title":"Snowpack.Protocol.handle_deallocate/4","type":"function"},{"doc":"Callback implementation for DBConnection.handle_declare/4 .","ref":"Snowpack.Protocol.html#handle_declare/4","title":"Snowpack.Protocol.handle_declare/4","type":"function"},{"doc":"Callback implementation for DBConnection.handle_execute/4 .","ref":"Snowpack.Protocol.html#handle_execute/4","title":"Snowpack.Protocol.handle_execute/4","type":"function"},{"doc":"Callback implementation for DBConnection.handle_fetch/4 .","ref":"Snowpack.Protocol.html#handle_fetch/4","title":"Snowpack.Protocol.handle_fetch/4","type":"function"},{"doc":"","ref":"Snowpack.Protocol.html#handle_first/4","title":"Snowpack.Protocol.handle_first/4","type":"function"},{"doc":"","ref":"Snowpack.Protocol.html#handle_next/4","title":"Snowpack.Protocol.handle_next/4","type":"function"},{"doc":"Callback implementation for DBConnection.handle_prepare/3 .","ref":"Snowpack.Protocol.html#handle_prepare/3","title":"Snowpack.Protocol.handle_prepare/3","type":"function"},{"doc":"Callback implementation for DBConnection.handle_rollback/2 .","ref":"Snowpack.Protocol.html#handle_rollback/2","title":"Snowpack.Protocol.handle_rollback/2","type":"function"},{"doc":"Callback implementation for DBConnection.handle_status/2 .","ref":"Snowpack.Protocol.html#handle_status/2","title":"Snowpack.Protocol.handle_status/2","type":"function"},{"doc":"Callback implementation for DBConnection.ping/1 .","ref":"Snowpack.Protocol.html#ping/1","title":"Snowpack.Protocol.ping/1","type":"function"},{"doc":"","ref":"Snowpack.Protocol.html#reconnect/2","title":"Snowpack.Protocol.reconnect/2","type":"function"},{"doc":"","ref":"Snowpack.Protocol.html#t:opts/0","title":"Snowpack.Protocol.opts/0","type":"type"},{"doc":"","ref":"Snowpack.Protocol.html#t:params/0","title":"Snowpack.Protocol.params/0","type":"type"},{"doc":"","ref":"Snowpack.Protocol.html#t:query/0","title":"Snowpack.Protocol.query/0","type":"type"},{"doc":"","ref":"Snowpack.Protocol.html#t:result/0","title":"Snowpack.Protocol.result/0","type":"type"},{"doc":"Process state. Includes: :pid : the pid of the ODBC process :snowflake : the transaction state. Can be :idle (not in a transaction). :conn_opts : the options used to set up the connection.","ref":"Snowpack.Protocol.html#t:state/0","title":"Snowpack.Protocol.state/0","type":"type"},{"doc":"","ref":"Snowpack.Protocol.html#t:status/0","title":"Snowpack.Protocol.status/0","type":"type"},{"doc":"Implementation of DBConnection.Query for Snowpack . The structure is: name - currently not used. statement - SQL statement to run using :odbc .","ref":"Snowpack.Query.html","title":"Snowpack.Query","type":"module"},{"doc":"","ref":"Snowpack.Query.html#t:t/0","title":"Snowpack.Query.t/0","type":"type"},{"doc":"Result struct returned from any successful query. Its public fields are: :columns - The column names; :num_rows - The number of fetched or affected rows; :rows - The result set. A list of tuples, each inner tuple corresponding to a row, each element in the inner tuple corresponds to a column; Warnings Depending on SQL MODE, a given query may error or just return warnings. If result.num_warnings is non-zero it means there were warnings and they can be retrieved by making another query: Snowpack . query! ( conn , &quot;SHOW WARNINGS&quot; )","ref":"Snowpack.Result.html","title":"Snowpack.Result","type":"module"},{"doc":"","ref":"Snowpack.Result.html#t:t/0","title":"Snowpack.Result.t/0","type":"type"},{"doc":"Telemetry integration. Unless specified, all time's are in :native units. Snowpack executes the following events: [:snowpack, :query, :start] - Executed at the start of each query sent to Snowflake. Measurements :system_time - The time the query started Metadata: :query - The query sent to the database as a string :params - The query parameters [:snowpack, :query, :stop] - Executed at the end of each query sent to Snowflake. Measurements :duration - The time spent executing the query Metadata: :query - The query sent to the database as a string :params - The query parameters :result - The query result (selected, updated) :num_rows - The number of rows effected by the query :error - Present if any error occurred while processing the query. (optional) [:snowpack, :query, :exception] - Executed if executing a query throws an exception. Measurements :duration - The time spent executing the query Metadata :kind - The type of exception. :error - Error description or error data. :stacktrace - The stacktrace","ref":"Snowpack.Telemetry.html","title":"Snowpack.Telemetry","type":"module"},{"doc":"Type conversions. Note the :odbc return types for decoding can be found here: http://erlang.org/doc/apps/odbc/databases.html#data-types-","ref":"Snowpack.Type.html","title":"Snowpack.Type","type":"module"},{"doc":"Transforms :odbc return values to Elixir representations.","ref":"Snowpack.Type.html#decode/2","title":"Snowpack.Type.decode/2","type":"function"},{"doc":"Transforms input params into :odbc params.","ref":"Snowpack.Type.html#encode/2","title":"Snowpack.Type.encode/2","type":"function"},{"doc":"Date as {year, month, day}","ref":"Snowpack.Type.html#t:date/0","title":"Snowpack.Type.date/0","type":"type"},{"doc":"Datetime","ref":"Snowpack.Type.html#t:datetime/0","title":"Snowpack.Type.datetime/0","type":"type"},{"doc":"Input param.","ref":"Snowpack.Type.html#t:param/0","title":"Snowpack.Type.param/0","type":"type"},{"doc":"Output value.","ref":"Snowpack.Type.html#t:return_value/0","title":"Snowpack.Type.return_value/0","type":"type"},{"doc":"Time as {hour, minute, sec, usec}","ref":"Snowpack.Type.html#t:time/0","title":"Snowpack.Type.time/0","type":"type"},{"doc":"Cache for fetching and storing the table column types.","ref":"Snowpack.TypeCache.html","title":"Snowpack.TypeCache","type":"module"},{"doc":"","ref":"Snowpack.TypeCache.html#child_spec/1","title":"Snowpack.TypeCache.child_spec/1","type":"function"},{"doc":"","ref":"Snowpack.TypeCache.html#fetch_column_types/3","title":"Snowpack.TypeCache.fetch_column_types/3","type":"function"},{"doc":"","ref":"Snowpack.TypeCache.html#get_column_types/1","title":"Snowpack.TypeCache.get_column_types/1","type":"function"},{"doc":"","ref":"Snowpack.TypeCache.html#key_from_statement/1","title":"Snowpack.TypeCache.key_from_statement/1","type":"function"},{"doc":"","ref":"Snowpack.TypeCache.html#start_link/1","title":"Snowpack.TypeCache.start_link/1","type":"function"},{"doc":"Parser for table column data types.","ref":"Snowpack.TypeParser.html","title":"Snowpack.TypeParser","type":"module"},{"doc":"","ref":"Snowpack.TypeParser.html#parse_rows/3","title":"Snowpack.TypeParser.parse_rows/3","type":"function"},{"doc":"Defines an error returned from the ODBC adapter. message is the full message returned by ODBC odbc_code is an atom representing the returned SQLSTATE or the string representation of the code if it cannot be translated.","ref":"Snowpack.Error.html","title":"Snowpack.Error","type":"exception"},{"doc":"","ref":"Snowpack.Error.html#t:t/0","title":"Snowpack.Error.t/0","type":"type"},{"doc":"","ref":"changelog.html","title":"CHANGELOG","type":"extras"},{"doc":"Bug Fixes change array type to :array, handle null arrays and json ( 1dea4ed ) Chores update Semantic Release CI step to use common config ( dc189a6 )","ref":"changelog.html#0-5-6-2021-12-06","title":"CHANGELOG - 0.5.6 (2021-12-06)","type":"extras"},{"doc":"Bug Fixes Make ODBC GenServer query calls default timeout Infinity (#17) ( e63b4e5 ), closes #17","ref":"changelog.html#0-5-5-2021-11-18","title":"CHANGELOG - 0.5.5 (2021-11-18)","type":"extras"},{"doc":"Bug Fixes remove end_time from telemetry measurements ( 92250f4 ) telemetry tests ( cb79304 )","ref":"changelog.html#0-5-4-2021-10-29","title":"CHANGELOG - 0.5.4 (2021-10-29)","type":"extras"},{"doc":"Bug Fixes bump version and update readme ( 9d93316 ) Chores jason should be an explicit dep ( a77b1ba )","ref":"changelog.html#0-5-3-2021-10-29","title":"CHANGELOG - 0.5.3 (2021-10-29)","type":"extras"},{"doc":"Bug Fixes need to supervise the cache (#16) ( 3a461e3 ), closes #16","ref":"changelog.html#0-5-2-2021-10-20","title":"CHANGELOG - 0.5.2 (2021-10-20)","type":"extras"},{"doc":"Bug Fixes remove event_prefix as it adds complication for common handlers and no real value (#15) ( a34c6b0 ), closes #15 0.5.0 (2021-10-18) Features add sending telemetry events for query start, stop, and exception (#14) ( 42c1b7d ), closes #14 0.4.0 (2021-10-15) Features better caching of query column types to reduce usage of transactions, LAST_QUERY_ID(), and DESCRIBE RESULT (#13) ( aba7732 ), closes #13 0.3.0 (2021-08-20) Features Handle results from a non select statement (#12) ( a5b6f11 ), closes #12 0.2.0 (2021-05-11) Features Update type parsing to cover more types and be based on query result (fixes #5) ( 8cf6b85 ), closes #5","ref":"changelog.html#0-5-1-2021-10-19","title":"CHANGELOG - 0.5.1 (2021-10-19)","type":"extras"},{"doc":"Bug Fixes set the default idle_interval to 5 min (#9) ( 67edb80 ), closes #9 Chores ci: refactor ci and Earthfile to configure elixir, erlang, ubuntu, and snowflake versions via args (#7) ( 3e39531 ), closes #7","ref":"changelog.html#0-1-4-2021-04-30","title":"CHANGELOG - 0.1.4 (2021-04-30)","type":"extras"},{"doc":"Bug Fixes provide a default idle_interval of 3600 sec to be used as a session keepalive (#6) ( 4a54529 ), closes #6","ref":"changelog.html#0-1-3-2021-04-16","title":"CHANGELOG - 0.1.3 (2021-04-16)","type":"extras"},{"doc":"Bug Fixes started adding more tests for queries (#3) ( d3f4c3d ), closes #3","ref":"changelog.html#0-1-2-2021-04-13","title":"CHANGELOG - 0.1.2 (2021-04-13)","type":"extras"},{"doc":"Bug Fixes parse zero-precision NUMBER types from Snowflake as integers, rather than decimals (#4) ( 85d1665 ), closes #4 Chores ci: fix next-version output var name ( 9c8140c ) 0.1.0 (2021-03-17) Features release 0.1.0 and docs cleanup ( 6048141 )","ref":"changelog.html#0-1-1-2021-03-25","title":"CHANGELOG - 0.1.1 (2021-03-25)","type":"extras"},{"doc":"Bug Fixes use UTF-8 binary encoding and handle unknown column types (#2) ( 3c3c55b ), closes #2 Chores fix CHANGELOG version ( b94b857 ) 0.0.1 (2021-03-11) Chores github actions, credo, ex_docs, semantic release ( 1f12897 ) new app ( f352e61 ) Features implement basic DBConnection query behavior (#1) ( 5f164e9 ), closes #1 Initial commit ( 9e5a9ba )","ref":"changelog.html#0-0-2-2021-03-17","title":"CHANGELOG - 0.0.2 (2021-03-17)","type":"extras"}]